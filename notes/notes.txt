Now:

Next:
  * Define stores via appConfig (Secrets Manager)
  * Can you also have Transformers and Rules on the Model itself (ie. MultiLang type)
  * I don't think you have "distinct" and "noRepeat" figured out and implemented (you can move noRepeat to enforce)

Bugs:
  * Where clause returns 404 for network.name
  * Embedded documents do not work!
    - Currently embedded document is being saved as it's own collection/node
    - Cannot update apartment.building
    - Cannot query where building.tenants, etc
    - Concept only fits document databases (what about neo4j and sql databases?)
    - How to create index on embedded objects? building.type unique?

Enhancements:
  * Could you construct Rule.allow() from GraphQL Enum Definition?
  * Can you make Emitter events part of a transaction? pre vs post can be confusing... especially for data validation etc.
  * Input types are not models and therefor cannot participate in Transformers|Rules
    - Is this really needed? I guess perhaps when using the DOA directly...

Todo:
  * Incorporate Logger
  * Date conversion can be a "writable" Transformation
  * MeteorUser _id is a String (not ID). How to handle?
  * Verify that Rules are passed parameters one would need to do custom logic (resolver sounds about right)
  * Error handling; Rules need better error messages
    - You can probably return a custom error message or (false|null|undefined) if all is good (ie. from Rule)
  * Get a list of references that would be onDelete affected
  * Currently there is no way to count regular elements of an array (try to count bids)
  * URL, RGB, RGBA, validator?
  * Allow Field and Model to be extended (directive fields)
  * Are you able to flatten fields? (ie. firstName, lastName but save to profile.firstName, profile.lastName in DB)
    - Confirmed that you cannot.

Ideas:
  * If the Query holds all the information you can move logic to it (eg. Query.validate())
  * Can you use semver over glob in some areas?

Figure out:
  * createdBy? (Audit trail)
  * Composite Rule Definitions?
  * Authorization. Specifically owner records, segmentation, recursive data resolution
  * dependencies vs peerDependencies (graphql)
  * Password and PasswordMatch validation; enforce strength; password can be created/updated but not selected, what's the scope?

Open Questions:
  * Where/How to define stores?

Sales Pitch:
  * Conforms to specifications
  * Automatic CRUD
  * Automatic Pagination
  * Unified Schema (validations & transformations)
  * Fixes "alias" problem - duplicate data
  * Automatic timestamps (createdAt updatedAt)
  * Transactions
  * Proper onDelete behavior (via transactions)
  * Baked in DataLoader
  - Able to work with models naturally instead of their db fieldname counterpart
  - Proper where clause filter

Refs:
  * https://jbt.github.io/markdown-editor/
  * https://gist.github.com/rxaviers/7360908
  * https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet
  * https://stackoverflow.com/questions/44639309/javascript-difference-between-reflect-get-and-objfoo

{ NAME: 'Name',
  DOCUMENT: 'Document',
  OPERATION_DEFINITION: 'OperationDefinition',
  VARIABLE_DEFINITION: 'VariableDefinition',
  SELECTION_SET: 'SelectionSet',
  FIELD: 'Field',
  ARGUMENT: 'Argument',
  FRAGMENT_SPREAD: 'FragmentSpread',
  INLINE_FRAGMENT: 'InlineFragment',
  FRAGMENT_DEFINITION: 'FragmentDefinition',
  VARIABLE: 'Variable',
  INT: 'IntValue',
  FLOAT: 'FloatValue',
  STRING: 'StringValue',
  BOOLEAN: 'BooleanValue',
  NULL: 'NullValue',
  ENUM: 'EnumValue',
  LIST: 'ListValue',
  OBJECT: 'ObjectValue',
  OBJECT_FIELD: 'ObjectField',
  DIRECTIVE: 'Directive',
  NAMED_TYPE: 'NamedType',
  LIST_TYPE: 'ListType',
  NON_NULL_TYPE: 'NonNullType',
  SCHEMA_DEFINITION: 'SchemaDefinition',
  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',
  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',
  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',
  FIELD_DEFINITION: 'FieldDefinition',
  INPUT_VALUE_DEFINITION: 'InputValueDefinition',
  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',
  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',
  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',
  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',
  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',
  DIRECTIVE_DEFINITION: 'DirectiveDefinition',
  SCHEMA_EXTENSION: 'SchemaExtension',
  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',
  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',
  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',
  UNION_TYPE_EXTENSION: 'UnionTypeExtension',
  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',
  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension' }