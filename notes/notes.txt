Now:
  * What was the reason for Query vs Find? Do you need it? I know it had to do with final stage of sorting/filtering/pagination.
  * scope: none on Models is incorrect
  * Enforce segmentation throughout (findNetwork, network field, ...)
    - But that means you can't use the resolver straight up and say where { 'network.name': 'name' }

Next:
  * Error handling; Rules need better error messages
    - You can probably return a custom error message or (false|null|undefined) if all is good (ie. from Rule)
  * Verify that Rules are passed parameters one would need to do custom logic (resolver sounds about right)
  * I don't think you have "distinct" and "noRepeat" figured out and implemented (you can move noRepeat to enforce)

Bugs:
  * Embedded documents do not work!
    - Currently embedded document is being saved as it's own collection/node
    - Cannot update apartment.building
    - Cannot query where building.tenants, etc
    - Concept only fits document databases (what about neo4j and sql databases?)
    - How to create index on embedded objects? building.type unique?

Enhancements:
  * Add 'filterBy' as an option for post query filtering (this can alleviate the depth-first where clause problem)
  * Where clause allow explicit NULL to be searchable (ie. where { authored: null } gives those who have not authored anything)
  * Can you make Emitter events part of a transaction? pre vs post can be confusing... especially for data validation etc.
  * Input types are not models and therefor cannot participate in Transformers|Rules
    - Is this really needed? I guess perhaps when using the DOA directly...

Todo:
  * Incorporate Logger
  * MeteorUser _id is a String (not ID). How to handle?
  * Get a list of references that would be onDelete affected
  * Currently there is no way to count regular elements of an array (try to count bids)
  * URL, RGB, RGBA, validator?
  * Allow Field and Model to be extended (directive fields)
  * Are you able to flatten fields? (ie. firstName, lastName but save to profile.firstName, profile.lastName in DB)
    - Confirmed that you cannot.

Ideas:
  * If the Query holds all the information you can move logic to it (eg. Query.validate())
  * Can you use semver over glob in some areas?

Figure out:
  * createdBy? (Audit trail)
  * Composite Rule Definitions?
  * Authorization. Specifically owner records, segmentation, recursive data resolution
  * dependencies vs peerDependencies (graphql)
  * Password and PasswordMatch validation; enforce strength; password can be created/updated but not selected, what's the scope?

Refs:
  * https://jbt.github.io/markdown-editor/
  * https://gist.github.com/rxaviers/7360908
  * https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet
  * https://stackoverflow.com/questions/44639309/javascript-difference-between-reflect-get-and-objfoo
