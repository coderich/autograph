Release 0.10.3:
  * Resolver probably doesn't have to finalize mutations since it's derived from Reads



  * Resolver.toResultSet() => How to hydrate results from the outside world?
  * makeExectuableSchema
  * SPITFIRE:
    - NetworkPlaceTagMultiLang definition
    - MultiLang API resolution vs Resolver

Release 0.10.4:
  *** There is a bug "where: { id: {one,two,three} }" does not work
  * Tests do not clean up Mongo connections
  * You never "validate" the schema anymore like in v0.9
  * Ability to create/use a custom dataloader (wait times API)
  * Revamp error handling -> all things to use Boom (including driver) with proper status codes
  * Determine attribute order when shaping data => this is how we want it saved to db
    - _id
    - fk ids
    - scalars
    - embedded objects
    - arrays

  * SchemaDecorator mutates schema passed in constructor => make sure that's OK
  * Splice Embedded Array => make sure it's OK
  * Can QueryBuilder be re-used => If not, prevent re-use

  * Finalize Driver Interface - consider moving out of Autograph into new NPM module
  * Database connection pooling?
  * Resolver.disconnect()
  * Tests do not clean up open Mongo connection
  * Tests comprehensive enough?

  * @field(ref: "???") => Does this work? How to use it? Rename it?
    * Allow FK by arbitrary value (ie. workspace.name)
  * Consider fixing API traveral problem:
    - If @model is omitted, it's a leaf, and embedded but no magic attributes added
  * EventEmitter().setMaxListeners(100) => Is this smelly?
  * Revisit SystemEvent args
  * It's unclear if where clause needs
    - "castValue" Transformation
  * Do you need proxyDeep?
  * Can you move caching to finalize() instead of initialize()?

  ** Fields with alias (keys) as the same name as other fields do not save properly eg:
      DataPackage.network: Network @field(key: "networkId") # Collides with networkId field
      DataPackage.networkId: ID # Legacy attribute so it's still needed

  ** Need plugin system
    - Pipeline utilities (validEmail, etc)
    - Validation libraries (JOI)
    - Database Drivers (Mongo, Postgres, Neo4J)

Next Release:
  ? Possibly rename input type to end with Input (eg. CreatePersonInput)
  * Allow input to be data model (not just graphql schema)
  * Deep sort (akin to where clause resolution?)
    - You are currently thwarted since key order is not preserved...
    - https://github.com/apollographql/apollo-server/issues/1564

Bugs:
  * Nested embedded object in array cannot delete without doing an explicit $pull operation (race condition)
    - Drivers need concept of push and pull
  * MongoDB cannot-create-namespace-in-multi-document-transaction (collection must first be defined)


Enhancements:
  * Create person with books at the same time
  * Add 'filterBy' as an option for post query filtering (this can alleviate the depth-first where clause problem)
  * Concept of "incomplete" and "what's missing" as part of data retrieval
  * Get a list of references that would be onDelete affected

Todo:
  * MeteorUser _id is a String (not ID). How to handle?
    - How about expicit ID definition?
  * Allow Field and Model to be extended (directive fields)
  * Are you able to flatten fields? (ie. firstName, lastName but save to profile.firstName, profile.lastName in DB)
    - Confirmed that you cannot.
  * Input types are not models and therefor cannot participate in Transformers|Rules
    - Is this really needed? I guess perhaps when using the DOA directly...
  * Embedded documents (outside of Mongo) do not work!
    - How to handle join-table in SQL?
    - How to create index on embedded objects? building.type unique?
  * Neo4j does not know how to generate ids
    - ID Value Strategy (MongoID, String, etc)

Figure out:
  * createdBy? (Audit trail)
  * Authorization. Specifically owner records, segmentation, recursive data resolution

How:
  data: {
    type: Mongo.Mixed,
    required: true,
    $onDelete: {
      key: 'data.id',
      op: 'unset',
      $set: { '../../../status': 'incomplete' },
      ref: {
        Category: { '../../type': 'category' },
        NetworkCuratedList: { '../../type': 'list', network_id: { $exists: 1 } },
      },
    },
  }

Refs:
  * https://yieldcode.blog/supercharge-nodejs-with-rust/
  * https://jbt.github.io/markdown-editor/
  * https://gist.github.com/rxaviers/7360908
  * https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet
  * https://stackoverflow.com/questions/44639309/javascript-difference-between-reflect-get-and-objfoo
  * https://nodesource.com/blog/understanding-streams-in-nodejs/
  * https://www.freecodecamp.org/news/node-js-streams-everything-you-need-to-know-c9141306be93/
  * https://www.smashingmagazine.com/2012/11/writing-fast-memory-efficient-javascript/

