Next:
  * Add @field(default: <value>)
  * Context. (tenants, segmentation, language)
  * Mutation should have meta input (how to define meta props?)
  * Define stores via appConfig (Secrets Manager)

Ideas:
  * Create a Document/Record class
    - hydrate, dehydrate, cast, etc
  * Can you use semver over glob in some areas?

Bugs:
  * Embedded documents do not work!
    - Currently embedded document is being saved as it's own collection/node
    - Cannot update apartment.building
    - Cannot query where building.tenants, etc
    - Concept only fits document databases (what about neo4j and sql databases?)
    - How to create index on embedded objects? building.type unique?

Todo:
  * Verify that Rules are passed parameters one would need to do custom logic
  * Error handling; Rules need better error messages
  * Get a list of references that would be onDelete affected
  * Currently there is no way to count regular elements of an array (try to count bids)
  * URL, RGB, RGBA, validator?
  * Allow Field and Model to be extended (directive fields)
  * Computed fields?
  * Are you able to flatten fields? (ie. firstName, lastName but save to profile.firstName, profile.lastName in DB)

Figure out:
  * createdBy? (Audit trail)
  * Composite Rule Definitions?
  * Authorization. Specifically owner records, segmentation, recursive data resolution
  * dependencies vs peerDependencies (graphql)
  * I don't think you have "distinct" and "noRepeat" figured out and implemented (you can move noRepeat to enforce)

Open Questions:
  * Where/How to define stores?
  * Should updatedAt be set when a document is created? Should it be configurable?

Refs:
  * https://jbt.github.io/markdown-editor/
  * https://gist.github.com/rxaviers/7360908
  * https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet
