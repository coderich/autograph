Ideas:
  * Create a Document/Record class
    - hydrate, dehydrate, cast, etc
  * Create a GQLParser class to consolidate Model and Field classes... pass raw gql to data/Model, data/Field

Bugs:
  * Casting must be bi-directional

Todo:
  * Verify that Rules are passed parameters one would need to do custom logic
  * Error handling; Rules need better error messages
  * Mutation should have meta input (how to define meta props?)
  * Get a list of references that would be onDelete affected
  * Currently there is no way to count regular elements of an array (try to count bids)

Figure out:
  * createdBy? (Audit trail)
  * Context. (tenants, segmentation, language)
  * Authorization. Specifically owner records, segmentation, recursion

Open Questions:
  * Where/How to define stores?

Integration Concerns
  * AutoGraph returns base64 id's for pagination; how to mix APIs and slowly migrate?
